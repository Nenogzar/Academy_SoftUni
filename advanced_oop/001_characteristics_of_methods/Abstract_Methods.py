"""
1. Дефиниция:

Абстрактните методи са методи, които се декларират в базов клас и задължават наследяващите класове да ги имплементират.
Не съдържат имплементация (тя може да бъде празна или да съдържа само ключовата дума pass).

2.Декларация:
Декларират се с декоратора @abstractmethod от модула abc (Abstract Base Classes).

"""

from abc import ABC, abstractmethod


class MyBaseClass(ABC):
    @abstractmethod
    def my_abstract_method(self):
        pass


"""
3. Използване на модул abc:
Класът, който съдържа абстрактни методи, трябва да наследява от ABC (Abstract Base Class) или друга абстрактна базова класа.
"""

from abc import ABC, abstractmethod


class Animal(ABC):
    @abstractmethod
    def make_sound(self):
        pass


"""
4. Задължителна имплементация:
Всеки клас, който наследява абстрактен клас, трябва да имплементира всички абстрактни методи, иначе ще възникне грешка при опит за инстанциране на този клас.
"""


class Dog(Animal):
    def make_sound(self):
        return "Bark"


# Следната линия ще предизвика грешка, ако make_sound не е имплементиран в Dog
dog = Dog()

"""
5. Не могат да бъдат инстанцирани директно:
Не може да се създава инстанция от абстрактен клас.
"""

# Този код ще предизвика грешка
animal = Animal()

"""
6.Служат като шаблони:
Абстрактните методи служат като шаблони за наследяващите класове, дефинирайки интерфейс, който те трябва да следват.

"""


class Cat(Animal):
    def make_sound(self):
        return "Meow"


"""
7. Могат да имат имплементация:
Макар че абстрактните методи обикновено нямат имплементация, те могат да имат такава, ако е необходимо. Наследяващите класове обаче са задължени да предоставят собствена имплементация.
"""


class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass


"""
8. Могат да съществуват заедно с нормални методи:
Абстрактните класове могат да съдържат както абстрактни, така и нормални методи.
"""


class BaseClass(ABC):
    @abstractmethod
    def required_method(self):
        pass

    def normal_method(self):
        return "This is a normal method"


"""
9. Помагат за създаване на полиморфизъм:
Чрез използване на абстрактни методи се гарантира, че всички наследяващи класове предоставят определени методи, което улеснява полиморфизма.

"""


def describe_animal(animal):
    print(animal.make_sound())


dog = Dog()
cat = Cat()
describe_animal(dog)  # Bark
describe_animal(cat)  # Meow

"""
Тези характеристики правят абстрактните методи важни за дефинирането на интерфейси 
и за осигуряване на последователност в имплементациите на наследяващите класове.

"""
