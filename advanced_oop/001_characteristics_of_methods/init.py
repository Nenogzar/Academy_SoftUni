class NewCLass:
    def __init__(self):
        pass


"""
Характеристики на __init__ метода:
1. Цел:
Методът __init__ е специален (магически) метод, наричан още конструктор, 
който се използва за инициализиране на новосъздадените обекти на клас.

2.Извикване:
Автоматично се извиква при създаване на нова инстанция на класа.
Не се извиква директно; вместо това се използва синтаксиса за създаване на нов обект (например obj = MyClass()).

3.Параметри:
Първият параметър винаги е self, който представлява текущата инстанция на класа.
Приема допълнителни параметри, които могат да бъдат използвани за инициализация на обекта.
"""


class MyClass:
    def __init__(self, value):
        self.value = value


"""
4. Инициализация на атрибути:
Използва се за задаване на начални стойности на атрибутите на обекта.
"""


class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age


"""
5. Няма връщаща стойност:
Методът __init__ не трябва да връща стойност; връщането на стойност от __init__ ще предизвика грешка.
"""


class MyClass1:
    def __init__(self):
        return "This is not allowed"  # Това ще предизвика грешка


"""
6. Наследяване:
Когато клас наследява друг клас, методът __init__ на базовия клас може да бъде извикан с помощта на super().
"""


class Base:
    def __init__(self, base_value):
        self.base_value = base_value


class Derived(Base):
    def __init__(self, base_value, derived_value):
        super().__init__(base_value)
        self.derived_value = derived_value


"""
7. Променлив брой аргументи:
Методът __init__ може да приема променлив брой позиционни и именувани аргументи с помощта на *args и **kwargs.

"""


class MyClass2:
    def __init__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs


"""
8. Валидация на входа:
Методът __init__ може да съдържа логика за валидация на аргументите, преди да ги зададе като атрибути на обекта.
"""


class Person1:
    def __init__(self, name, age):
        if age < 0:
            raise ValueError("Age cannot be negative")
        self.name = name
        self.age = age


"""
9. Не е задължителен:
Класовете не са задължени да имат метод __init__. 
Ако не е дефиниран, Python използва автоматично създадения метод __init__ от базовия клас (ако има такъв).
"""


class MyClass3:
    pass


obj = MyClass3()  # Това е валидно, дори без дефиниран __init__ метод

"""
10. Подобрена четимост:
Използването на __init__ метода прави кода по-лесен за разбиране, 
тъй като ясно указва какви атрибути се инициализират и какви начални стойности приемат.
"""


class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height


"""
Тези характеристики правят метода __init__ основен инструмент за инициализация на обекти 
и задаване на начални стойности на техните атрибути, 
като същевременно осигуряват гъвкавост и удобство при създаването на нови инстанции на класове.
"""
